@model HotelComandasEletronicas.Models.Produto
@{
    ViewData["Title"] = $"Detalhes: {Model.Descricao} - Sistema de Comandas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="perfil-header perfil-supervisor mb-4">
            <h2 class="mb-2">
                <i class="fas fa-eye me-3"></i>
                Detalhes do Produto
            </h2>
            <p class="mb-0">Informações completas</p>
        </div>
    </div>
</div>

<!-- Card Principal do Produto -->
<div class="row">
    <div class="col-lg-8 mb-4">
        <div class="card shadow-lg">
            <div class="card-header @(Model.IsCategoria("Bebidas") ? "bg-info" : 
                                     Model.IsCategoria("Comidas") ? "bg-warning" : 
                                     "bg-success") text-white">
                <div class="d-flex align-items-center justify-content-between">
                    <h4 class="mb-0">
                        <i class="@(Model.IsCategoria("Bebidas") ? "fas fa-glass-whiskey" : 
                                  Model.IsCategoria("Comidas") ? "fas fa-utensils" : 
                                  "fas fa-concierge-bell") me-2"></i>
                        @Model.Descricao
                    </h4>
                    @if (Model.IsAtivo())
                    {
                        <span class="badge bg-light text-dark">
                            <i class="fas fa-check me-1"></i>Ativo
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-dark">
                            <i class="fas fa-times me-1"></i>Inativo
                        </span>
                    }
                </div>
            </div>

            <div class="card-body">
                <!-- Informações Principais -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h5 class="text-muted mb-3">Informações Básicas</h5>
                        <dl class="row">
                            <dt class="col-sm-4">ID:</dt>
                            <dd class="col-sm-8">#@Model.ID</dd>

                            <dt class="col-sm-4">Categoria:</dt>
                            <dd class="col-sm-8">
                                <span class="badge @(Model.IsCategoria("Bebidas") ? "bg-info" : 
                                                    Model.IsCategoria("Comidas") ? "bg-warning text-dark" : 
                                                    "bg-success")">
                                    @Model.Categoria
                                </span>
                            </dd>

                            <dt class="col-sm-4">Valor:</dt>
                            <dd class="col-sm-8">
                                <h4 class="text-success mb-0">@Model.FormatarValor()</h4>
                            </dd>

                            <dt class="col-sm-4">Status:</dt>
                            <dd class="col-sm-8">
                                @if (Model.IsAtivo())
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check me-1"></i>Produto Ativo
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">
                                        <i class="fas fa-ban me-1"></i>Produto Inativo
                                    </span>
                                }
                            </dd>
                        </dl>
                    </div>

                    <div class="col-md-6">
                        <h5 class="text-muted mb-3">Informações de Cadastro</h5>
                        <dl class="row">
                            <dt class="col-sm-5">Cadastrado em:</dt>
                            <dd class="col-sm-7">@Model.DataCadastro.ToString("dd/MM/yyyy HH:mm")</dd>

                            <dt class="col-sm-5">Cadastrado por:</dt>
                            <dd class="col-sm-7">
                                <code>@Model.UsuarioCadastro</code>
                            </dd>

                            <dt class="col-sm-5">Disponível há:</dt>
                            <dd class="col-sm-7">
                                @{
                                    var diasCadastrado = (DateTime.Now - Model.DataCadastro).Days;
                                }
                                @diasCadastrado dia@(diasCadastrado != 1 ? "s" : "")
                            </dd>
                        </dl>
                    </div>
                </div>

                <!-- Botões de Ação -->
                <div class="row">
                    <div class="col-12">
                        <hr>
                        <div class="d-flex gap-2 flex-wrap">
                            <a href="/produto/editar/@Model.ID" class="btn btn-warning">
                                <i class="fas fa-edit me-1"></i>Editar Produto
                            </a>
                            
                            <button type="button" class="btn btn-info" onclick="alterarPrecoModal()">
                                <i class="fas fa-dollar-sign me-1"></i>Alterar Preço
                            </button>
                            
                            @if (Model.IsAtivo())
                            {
                                <button type="button" class="btn btn-outline-danger" onclick="inativarProduto()">
                                    <i class="fas fa-ban me-1"></i>Inativar
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-outline-success" onclick="ativarProduto()">
                                    <i class="fas fa-check me-1"></i>Ativar
                                </button>
                            }
                            
                            <a href="/produto" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-1"></i>Voltar à Lista
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar com Estatísticas -->
    <div class="col-lg-4 mb-4">
        <!-- Card de Uso nos Lançamentos -->
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">
                <h6 class="mb-0">
                    <i class="fas fa-chart-bar me-2"></i>
                    Estatísticas de Uso
                </h6>
            </div>
            <div class="card-body">
                @if (Model.Lancamentos?.Any() == true)
                {
                    var lancamentosAtivos = Model.Lancamentos.Where(l => l.IsAtivo()).ToList();
                    var totalQuantidade = lancamentosAtivos.Sum(l => l.Quantidade);
                    var totalValor = lancamentosAtivos.Sum(l => l.ValorTotal);
                    var ultimoLancamento = lancamentosAtivos.OrderByDescending(l => l.DataHoraLancamento).FirstOrDefault();

                    <div class="text-center mb-3">
                        <h4 class="text-primary">@totalQuantidade</h4>
                        <small class="text-muted">Unidades vendidas</small>
                    </div>

                    <div class="text-center mb-3">
                        <h4 class="text-success">@totalValor.ToString("C2")</h4>
                        <small class="text-muted">Valor total arrecadado</small>
                    </div>

                    @if (ultimoLancamento != null)
                    {
                        <div class="text-center">
                            <small class="text-muted">
                                <strong>Último lançamento:</strong><br>
                                @ultimoLancamento.DataHoraLancamento.ToString("dd/MM/yyyy HH:mm")
                            </small>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted">
                        <i class="fas fa-info-circle fa-2x mb-2"></i>
                        <p class="mb-0">Ainda não foi lançado</p>
                    </div>
                }
            </div>
        </div>

        <!-- Card de Ações Rápidas -->
        <div class="card">
            <div class="card-header bg-secondary text-white">
                <h6 class="mb-0">
                    <i class="fas fa-bolt me-2"></i>
                    Ações Rápidas
                </h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="copiarProduto()">
                        <i class="fas fa-copy me-1"></i>Duplicar Produto
                    </button>
                    
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="verHistorico()">
                        <i class="fas fa-history me-1"></i>Ver Histórico
                    </button>
                    
                    <a href="/produto/cadastrar" class="btn btn-outline-success btn-sm">
                        <i class="fas fa-plus me-1"></i>Cadastrar Novo
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Histórico de Lançamentos (se houver) -->
@if (Model.Lancamentos?.Any() == true)
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-receipt me-2"></i>
                        Histórico de Lançamentos (@Model.Lancamentos.Count())
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>Data/Hora</th>
                                    <th>Quarto</th>
                                    <th>Cliente</th>
                                    <th>Quantidade</th>
                                    <th>Valor Unit.</th>
                                    <th>Total</th>
                                    <th>Responsável</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var lancamento in Model.Lancamentos.OrderByDescending(l => l.DataHoraLancamento).Take(10))
                                {
                                    <tr class="@(lancamento.IsAtivo() ? "" : "table-secondary")">
                                        <td>
                                            <small>@lancamento.FormatarDataHora()</small>
                                        </td>
                                        <td>
                                            <strong>@lancamento.RegistroHospede?.NumeroQuarto</strong>
                                        </td>
                                        <td>
                                            @lancamento.RegistroHospede?.NomeCliente
                                        </td>
                                        <td>
                                            @lancamento.FormatarQuantidade()
                                        </td>
                                        <td>
                                            @lancamento.ValorUnitario.ToString("C2")
                                        </td>
                                        <td>
                                            <strong>@lancamento.FormatarValorTotal()</strong>
                                        </td>
                                        <td>
                                            <code>@lancamento.CodigoUsuarioLancamento</code>
                                        </td>
                                        <td>
                                            @if (lancamento.IsAtivo())
                                            {
                                                <span class="badge bg-success">Ativo</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Cancelado</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    @if (Model.Lancamentos.Count() > 10)
                    {
                        <div class="text-center mt-3">
                            <p class="text-muted">Mostrando os 10 lançamentos mais recentes de @Model.Lancamentos.Count() total.</p>
                            <button type="button" class="btn btn-outline-info btn-sm" onclick="verTodosLancamentos()">
                                <i class="fas fa-list me-1"></i>Ver Todos os Lançamentos
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para alterar preço -->
<div class="modal fade" id="modalAlterarPreco" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">
                    <i class="fas fa-dollar-sign me-2"></i>
                    Alterar Preço: @Model.Descricao
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="precoAtual" class="form-label">Preço Atual</label>
                    <input type="text" class="form-control" id="precoAtual" value="@Model.FormatarValor()" readonly>
                </div>
                <div class="mb-3">
                    <label for="novoPreco" class="form-label">Novo Preço</label>
                    <div class="input-group">
                        <span class="input-group-text">R$</span>
                        <input type="number" class="form-control" id="novoPreco" 
                               step="0.01" min="0.01" max="9999.99"
                               value="@Model.Valor.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"
                               placeholder="0,00">
                    </div>
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Esta alteração afetará apenas novos lançamentos. Lançamentos existentes manterão o valor original.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" onclick="confirmarAlteracaoPreco()">
                    <i class="fas fa-save me-1"></i>
                    Alterar Preço
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Alterar preço
        function alterarPrecoModal() {
            new bootstrap.Modal(document.getElementById('modalAlterarPreco')).show();
            document.getElementById('novoPreco').focus();
        }

        function confirmarAlteracaoPreco() {
            const novoPreco = parseFloat(document.getElementById('novoPreco').value);

            if (!novoPreco || novoPreco <= 0) {
                alert('Digite um preço válido maior que zero.');
                return;
            }

            const requestData = {
                produtoId: @Model.ID,
                novoPreco: novoPreco
            };

            fetch('/produto/alterarpreco', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.sucesso) {
                    alert(data.mensagem);
                    location.reload();
                } else {
                    alert(`Erro: ${data.mensagem}`);
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro ao alterar preço. Tente novamente.');
            });

            bootstrap.Modal.getInstance(document.getElementById('modalAlterarPreco')).hide();
        }

        // Inativar produto
        function inativarProduto() {
            if (!confirm('Tem certeza que deseja inativar este produto?\n\nO produto não aparecerá mais na lista de lançamentos.')) {
                return;
            }

            const formData = new FormData();
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch(`/produto/inativar/@Model.ID`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.sucesso) {
                    alert(data.mensagem);
                    location.reload();
                } else {
                    alert(`Erro: ${data.mensagem}`);
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro ao inativar produto. Tente novamente.');
            });
        }

        // Ativar produto
        function ativarProduto() {
            if (!confirm('Tem certeza que deseja ativar este produto?')) {
                return;
            }

            const formData = new FormData();
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch(`/produto/ativar/@Model.ID`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.sucesso) {
                    alert(data.mensagem);
                    location.reload();
                } else {
                    alert(`Erro: ${data.mensagem}`);
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Erro ao ativar produto. Tente novamente.');
            });
        }

        // Ações futuras
        function copiarProduto() {
            if (confirm('Deseja criar um novo produto baseado neste?\n\nVocê será redirecionado para o formulário de cadastro com os dados preenchidos.')) {
                // Implementar redirecionamento com dados preenchidos
                const url = `/produto/cadastrar?copiarDe=@Model.ID`;
                window.location.href = url;
            }
        }

        function verHistorico() {
            alert('Funcionalidade de histórico detalhado será implementada em breve.');
        }

        function verTodosLancamentos() {
            alert('Funcionalidade para ver todos os lançamentos será implementada em breve.');
        }

        // Atalhos de teclado
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'e') {
                e.preventDefault();
                window.location.href = '/produto/editar/@Model.ID';
            }
            if (e.ctrlKey && e.key === 'p') {
                e.preventDefault();
                alterarPrecoModal();
            }
        });
    </script>
}

@{
    // Token para requisições AJAX
    <input name="__RequestVerificationToken" type="hidden" value="@Html.AntiForgeryToken()" />
}